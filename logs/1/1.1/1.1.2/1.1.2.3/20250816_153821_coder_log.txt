
=== Coder Agent Log ===
Timestamp: 2025-08-16T15:38:21.285320
Task: Implement logic to parse diffs for each commit

Output:
import git

def parse_commit_diff(commit):
    """
    Parses the diffs for a given commit against its first parent.

    For the initial commit (which has no parents), it shows the diff against an
    empty tree, effectively showing all files as newly added. For merge commits,
    it compares against the first parent.

    Args:
        commit (git.Commit): The commit object to analyze.

    Returns:
        list[dict]: A list of dictionaries, where each dictionary represents
                    a single file change. Each dictionary contains keys:
                    - 'change_type': e.g., 'A' (Added), 'D' (Deleted),
                                     'M' (Modified), 'R' (Renamed).
                    - 'old_path': The path of the file before the change (or None).
                    - 'new_path': The path of the file after the change (or None).
                    - 'diff_text': The raw text of the diff.
    """
    if commit.parents:
        # Diff against the first parent
        parent = commit.parents[0]
    else:
        # For the initial commit, diff against an empty tree
        parent = git.NULL_TREE

    # The create_patch=True option is crucial to get the textual diff
    diff_index = parent.diff(commit, create_patch=True)

    parsed_diffs = []
    for diff_item in diff_index:
        diff_text = ''
        if diff_item.diff:
            # The diff content is in bytes, so we decode it
            diff_text = diff_item.diff.decode('utf-8', errors='ignore')

        change = {
            'change_type': diff_item.change_type,
            'old_path': diff_item.a_path,
            'new_path': diff_item.b_path,
            'diff_text': diff_text,
        }
        parsed_diffs.append(change)

    return parsed_diffs

==================================================
