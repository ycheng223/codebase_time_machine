
=== Tester Agent Log ===
Timestamp: 2025-08-16T15:53:25.326702
Task: Write unit tests for data aggregation functions

Output:
import unittest

# The implementation to test
def aggregate_lines_changed_per_author(commits_data):
    """
    Aggregates lines changed per author over time from commit data.

    This function processes a list of commit-like dictionaries, each
    containing author, date, and line change information. It returns a
    nested dictionary summarizing the total lines changed (added + deleted)
    for each author on each specific date.

    Args:
        commits_data (list[dict]): A list of dictionaries, where each
                                   dictionary represents a commit. Expected keys
                                   are 'author', 'date', 'lines_added', and
                                   'lines_deleted'.

    Returns:
        dict: A dictionary where keys are author names. Each value is another
              dictionary where keys are dates and values are the integer total
              of lines changed for that author on that date.
              Example: {'author1': {'2023-10-27': 150, '2023-10-28': 75}}
    """
    author_stats = {}

    for commit in commits_data:
        author = commit.get('author')
        date = commit.get('date')
        lines_added = commit.get('lines_added', 0)
        lines_deleted = commit.get('lines_deleted', 0)

        if not author or not date:
            continue

        lines_changed = lines_added + lines_deleted

        if author not in author_stats:
            author_stats[author] = {}

        # Add the lines changed to the existing total for that author and date
        current_changes = author_stats[author].get(date, 0)
        author_stats[author][date] = current_changes + lines_changed

    return author_stats


class TestAggregateLinesChangedPerAuthor(unittest.TestCase):

    def test_empty_commit_list(self):
        """Test with an empty list of commits, expecting an empty dictionary."""
        self.assertDictEqual(aggregate_lines_changed_per_author([]), {})

    def test_single_commit(self):
        """Test with a single commit entry."""
        commits_data = [{
            'author': 'Alice',
            'date': '2023-10-27',
            'lines_added': 10,
            'lines_deleted': 5
        }]
        expected = {'Alice': {'2023-10-27': 15}}
        self.assertDictEqual(aggregate_lines_changed_per_author(commits_data), expected)

    def test_multiple_commits_same_author_same_day(self):
        """Test that commits from the same author on the same day are aggregated."""
        commits_data = [
            {'author': 'Alice', 'date': '2023-10-27', 'lines_added': 10, 'lines_deleted': 5},
            {'author': 'Alice', 'date': '2023-10-27', 'lines_added': 20, 'lines_deleted': 15}
        ]
        expected = {'Alice': {'2023-10-27': 50}} # (10+5) + (20+15) = 50
        self.assertDictEqual(aggregate_lines_changed_per_author(commits_data), expected)

    def test_multiple_authors_and_dates(self):
        """Test aggregation with multiple authors and different dates."""
        commits_data = [
            {'author': 'Alice', 'date': '2023-10-27', 'lines_added': 10, 'lines_deleted': 5},
            {'author': 'Bob', 'date': '2023-10-27', 'lines_added': 100, 'lines_deleted': 50},
            {'author': 'Alice', 'date': '2023-10-28', 'lines_added': 8, 'lines_deleted': 2},
            {'author': 'Charlie', 'date': '2023-10-28', 'lines_added': 30, 'lines_deleted': 0}
        ]
        expected = {
            'Alice': {'2023-10-27': 15, '2023-10-28': 10},
            'Bob': {'2023-10-27': 150},
            'Charlie': {'2023-10-28': 30}
        }
        self.assertDictEqual(aggregate_lines_changed_per_author(commits_data), expected)

    def test_commit_with_missing_line_data(self):
        """Test commits where 'lines_added' or 'lines_deleted' are missing."""
        commits_data = [
            {'author': 'Alice', 'date': '2023-10-27', 'lines_added': 10},
            {'author': 'Bob', 'date': '2023-10-27', 'lines_deleted': 25},
            {'author': 'Alice', 'date': '2023-10-27'} # No line data at all
        ]
        expected = {
            'Alice': {'2023-10-27': 10}, # 10 + 0 = 10
            'Bob': {'2023-10-27': 25}    # 0 + 25 = 25
        }
        self.assertDictEqual(aggregate_lines_changed_per_author(commits_data), expected)

    def test_commit_with_missing_author_or_date(self):
        """Test that commits missing 'author' or 'date' are ignored."""
        commits_data = [
            {'author': 'Alice', 'date': '2023-10-27', 'lines_added': 10, 'lines_deleted': 5},
            {'date': '2023-10-27', 'lines_added': 100, 'lines_deleted': 50}, # Missing author
            {'author': 'Bob', 'lines_added': 8, 'lines_deleted': 2}, # Missing date
            {'lines_added': 1, 'lines_deleted': 1} # Missing both
        ]
        expected = {'Alice': {'2023-10-27': 15}}
        self.assertDictEqual(aggregate_lines_changed_per_author(commits_data), expected)

    def test_commit_with_zero_changes(self):
        """Test a commit that has zero lines added and deleted."""
        commits_data = [
            {'author': 'Alice', 'date': '2023-10-27', 'lines_added': 10, 'lines_deleted': 5},
            {'author': 'Bob', 'date': '2023-10-28', 'lines_added': 0, 'lines_deleted': 0}
        ]
        expected = {
            'Alice': {'2023-10-27': 15},
            'Bob': {'2023-10-28': 0}
        }
        self.assertDictEqual(aggregate_lines_changed_per_author(commits_data), expected)

    def test_mixed_data_integrity(self):
        """Test a complex mix of valid, invalid, and partial commit data."""
        commits_data = [
            # Valid data for Alice on day 1
            {'author': 'Alice', 'date': '2023-11-01', 'lines_added': 50, 'lines_deleted': 25},
            # Valid data for Bob on day 1
            {'author': 'Bob', 'date': '2023-11-01', 'lines_added': 10, 'lines_deleted': 10},
            # Invalid data (missing author)
            {'date': '2023-11-01', 'lines_added': 99, 'lines_deleted': 99},
            # More valid data for Alice on day 1
            {'author': 'Alice', 'date': '2023-11-01', 'lines_added': 5, 'lines_deleted': 5},
            # Valid data for Alice on day 2
            {'author': 'Alice', 'date': '2023-11-02', 'lines_added': 100, 'lines_deleted': 0},
            # Invalid data (missing date)
            {'author': 'Bob', 'lines_added': 88, 'lines_deleted': 88},
            # Partial data for Bob on day 2 (should be handled as 0)
            {'author': 'Bob', 'date': '2023-11-02'}
        ]
        expected = {
            'Alice': {
                '2023-11-01': 85,  # (50+25) + (5+5)
                '2023-11-02': 100
            },
            'Bob': {
                '2023-11-01': 20,
                '2023-11-02': 0
            }
        }
        self.assertDictEqual(aggregate_lines_changed_per_author(commits_data), expected)

if __name__ == '__main__':
    unittest.main(argv=['first-arg-is-ignored'], exit=False)

==================================================
